var remoteUrl = "<%-remoteUrl%>";

function checkForEvents() {
	console.log("Checking for new events");

	var xhr = new XMLHttpRequest();
	xhr.open('GET', remoteUrl + '/currentEvent');
	xhr.onload = function() {
		var event = JSON.parse(xhr.responseText);
		if (event) {
			handleEvent(JSON.parse(xhr.responseText));
		} else {
			setTimeout(checkForEvents, 250);
		}
	};
	xhr.send();
}

function completeEvent(id, results, callback) {
	console.log("Completed event", id, results);

	var xhr = new XMLHttpRequest();
	xhr.open('POST', remoteUrl + '/completedEvent', true);
	xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
	xhr.onreadystatechange = function() {
		if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
			if (callback) {
				callback();
			}
		}
	}
	xhr.send("id=" + id + "&results=" + JSON.stringify(results));
}

function startEvent(id, callback) {
	console.log("Started event", id);

	var xhr = new XMLHttpRequest();
	xhr.open('POST', remoteUrl + '/startedEvent', true);
	xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
	xhr.onreadystatechange = function() {
		if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
			if (callback) {
				callback();
			}
		}
	}
	xhr.send("id=" + JSON.stringify(id));
}

function handleEvent(event) {
	console.log("Recieved event", event);

	if (event.type == "open") {
		if (event.state == "waiting") {
			startEvent(event.id, function(){
				window.location = event.body.url;
			});
		}

		if (event.state == "started") {
			completeEvent(event.id, true, checkForEvents);
		}
	}

	if (event.type == "script") {

		if (event.state == "waiting") {
			startEvent(event.id, function() {
				
				// Do we want to execute this script in the current page, or an IAB page?
				if (cordovaIabReference) {
					var details = {
						code: "(" + event.body.script + ")()"
					};
					cordovaIabReference.executeScript(details, function(results) {
						completeEvent(event.id, results[0], checkForEvents);
					});
				} else {
					var results = eval("(" + event.body.script + ")")();
					completeEvent(event.id, results, checkForEvents);
				}
			});
		}
		
		if (event.state == "started") {
			completeEvent(event.id, true, checkForEvents);
		}
	}
}

var realCordovaIABOpen;
var cordovaIabReference;

function cordova_init() {
	if (typeof cordova === "undefined") {
		return;
	}

	realCordovaIABOpen = cordova.InAppBrowser.open;

	cordova.InAppBrowser.open = function(url, target, options) {
		cordovaIabReference = realCordovaIABOpen(url, target, options);
		return cordovaIabReference;
	};
}

setTimeout(checkForEvents, 250);
document.addEventListener("deviceready", cordova_init, false);
